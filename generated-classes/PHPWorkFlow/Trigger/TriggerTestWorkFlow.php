<?php
/**
 * Generated by GenerateWorkFlowTriggerClasses.php
 */
namespace PHPWorkFlow;

/**
 * Class TriggerTestWorkFlow
 */
class TriggerTestWorkFlow extends TriggerBase{

    /**
     * @param  $workItemObj
     *
     */
    public function __construct($workItemObj=null){
        parent::__construct($workItemObj);
    }

    /*
     * Each of these _trigger methods match a Transition in the workflow xxxxx where this class
     * is named Triggerxxxxx
     *
     * These trigger methods are called in 2 contexts
     *      @todo fix this
     *      - by a WorkFlowTrafficker that was generated by the app. In this case, we will check
     *          against the context data contained in the Tokens that point into
     *          the work_item in question
     *      - by a batch process or at work_item creating time to see if this work_item has been satisfied. In this case,
     *          $controllerResultsArr will be null and we'll need to cleverly access info via DAOS or whatever
     */


    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR1AddOrgType1TriggerUser(){

    
        /**
         * replace this with your CUSTOM CODE. Simply return false if the circumstances that 'pass' this
         * transition are not present OR
         * call $this->pullTheTrigger() and return true if they are present.
         */

        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR1AddOrgType1TriggerUser */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){

            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:user Name:TR1AddOrgType1TriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:user Name:TR1AddOrgType1TriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }
        /** END CUSTOM CODE */

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR10AddBuildUser24x7PhoneTriggerUser(){

    
        /**
         * replace this with your CUSTOM CODE. Simply return false if the circumstances that 'pass' this
         * transition are not present OR
         * call $this->pullTheTrigger() and return true if they are present.
         */

        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR10AddBuildUser24x7PhoneTriggerUser */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){

            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:user Name:TR10AddBuildUser24x7PhoneTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:user Name:TR10AddBuildUser24x7PhoneTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }
        /** END CUSTOM CODE */

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR11AddBuildUserCellPhoneTriggerUser(){

    
        /**
         * replace this with your CUSTOM CODE. Simply return false if the circumstances that 'pass' this
         * transition are not present OR
         * call $this->pullTheTrigger() and return true if they are present.
         */

        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR11AddBuildUserCellPhoneTriggerUser */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){

            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:user Name:TR11AddBuildUserCellPhoneTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:user Name:TR11AddBuildUserCellPhoneTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }
        /** END CUSTOM CODE */

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR12EmailSuperTriggerNotification(){

    
        /**
         * insert code you want to run when this workItem is created Returning
         * false is not an option here
         */
        foreach($this->workItemObj->getTransition()->getNotifications() as $notificationObj){
            if($notificationObj->getNotificationType() == Enum\NotificationTypeEnum::EMAIL){

                /**
                 * email somebody something using $notificationObj->getNotificationString()
                 */
                /** BEGIN CUSTOM CODE */

                /** END CUSTOM CODE */
            }
            elseif($notificationObj->getNotificationType() == Enum\NotificationTypeEnum::SMS){
                /**
                 * sms somebody something using $notificationObj->getNotificationString()
                 */
                /** BEGIN CUSTOM CODE */

                /** END CUSTOM CODE */
            }
        }
        /**
         * Consume/drop tokens
         */
        if(Configuration_WorkFlow::getLogTriggerActivity()) {
            Logger_WorkFlow::info(
                'Trigger passed. Type:notification Name:TR12EmailSuperTriggerNotification UseCase:'.$this->workItemObj->getUseCase()->getName().
                    ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
            );
        }
        /**
        * unconditionally pull trigger and return true
        */
        $this->pullTheTrigger();
        return true;

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR13EmailSuperTriggerNotification(){

    
        /**
         * insert code you want to run when this workItem is created Returning
         * false is not an option here
         */
        foreach($this->workItemObj->getTransition()->getNotifications() as $notificationObj){
            if($notificationObj->getNotificationType() == Enum\NotificationTypeEnum::EMAIL){

                /**
                 * email somebody something using $notificationObj->getNotificationString()
                 */
                /** BEGIN CUSTOM CODE */

                /** END CUSTOM CODE */
            }
            elseif($notificationObj->getNotificationType() == Enum\NotificationTypeEnum::SMS){
                /**
                 * sms somebody something using $notificationObj->getNotificationString()
                 */
                /** BEGIN CUSTOM CODE */

                /** END CUSTOM CODE */
            }
        }
        /**
         * Consume/drop tokens
         */
        if(Configuration_WorkFlow::getLogTriggerActivity()) {
            Logger_WorkFlow::info(
                'Trigger passed. Type:notification Name:TR13EmailSuperTriggerNotification UseCase:'.$this->workItemObj->getUseCase()->getName().
                    ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
            );
        }
        /**
        * unconditionally pull trigger and return true
        */
        $this->pullTheTrigger();
        return true;

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR14EmailSuperSuccessTriggerAuto(){

    
        /**
         * insert CUSTOM CODE you want to run BEFORE the commands (if any) that were indicated in PNML file.
         * Remember returning false is not an option here unless you want this trigger to run over and over again.
         *
         */
        /** BEGIN CUSTOM CODE */



        /** END CUSTOM CODE */

        if($this->workItemObj->getTransition()->getCommands()){
            foreach($this->workItemObj->getTransition()->getCommands() as $commandObj){
                $matches = [];
                $param_value_pairs = [];
                if(preg_match_all("/%([A-z1-9_]*)($|\s)/", $commandObj->getCommandString(), $matches)){
                    foreach($matches[1] as $match){
                        if($useCaseTokenObj = $this->getWorkFlowDAO()->FetchUseCaseContextArrWithUseCaseIdAndName($this->workItemObj->getUseCaseId(), $match)){
                            $param_value_pairs[$match] = $useCaseTokenObj->getValue();
                        }
                    }
                }

                $command_string =  $commandObj->getCommandString();
                foreach($param_value_pairs as $key => $value){
                    $command_string = preg_replace('/%' . $key.'/', $value, $command_string);
                }
                /**
                 * @todo add system call here
                 */

            }
        }
        /**
         * insert CUSTOM CODE you want to run AFTER the commands (if any) that were indicated in PNML file.
         * Remember returning false is not an option here unless you want this trigger to run over and over again.
         *
         */
        /** BEGIN CUSTOM CODE */



        /** END CUSTOM CODE */

        /*
         * Consume/drop tokens
         */
        if(Configuration_WorkFlow::getLogTriggerActivity()) {
            Logger_WorkFlow::info(
                'Trigger passed. Type:auto Name:TR14EmailSuperSuccessTriggerAuto UseCase:'.$this->workItemObj->getUseCase()->getName().
                    ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
            );
        }

        /**
        * unconditionally pull trigger and return true
        */
        $this->pullTheTrigger();
        return true;

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR15EmailSuperFailureTriggerTimed(){

    
        $whenToTriggerAfter = $this->workItemObj->getCreatedAt()->getTimestamp()  + $this->workItemObj->getTransition()->getTimeDelay();
        if($whenToTriggerAfter < time()){
            /**
             * add the CUSTOM CODE you want to run 3600 seconds
             * after this workItem is created. This trigger will run when the workItem in question is created
             * and (as long as the workItem in question is created is ENABLED) when
             * is run on the workItem in question. See scripts/pushUseCasesForward.php
             */
            /** BEGIN CUSTOM CODE */




            /** END CUSTOM CODE */
            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:timed Name:TR15EmailSuperFailureTriggerTimed UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:timed Name:TR15EmailSuperFailureTriggerTimed UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR16EmailStaffFinishedWithTeamAgentTriggerAuto(){

    
        /**
         * insert CUSTOM CODE you want to run BEFORE the commands (if any) that were indicated in PNML file.
         * Remember returning false is not an option here unless you want this trigger to run over and over again.
         *
         */
        /** BEGIN CUSTOM CODE */



        /** END CUSTOM CODE */

        if($this->workItemObj->getTransition()->getCommands()){
            foreach($this->workItemObj->getTransition()->getCommands() as $commandObj){
                $matches = [];
                $param_value_pairs = [];
                if(preg_match_all("/%([A-z1-9_]*)($|\s)/", $commandObj->getCommandString(), $matches)){
                    foreach($matches[1] as $match){
                        if($useCaseTokenObj = $this->getWorkFlowDAO()->FetchUseCaseContextArrWithUseCaseIdAndName($this->workItemObj->getUseCaseId(), $match)){
                            $param_value_pairs[$match] = $useCaseTokenObj->getValue();
                        }
                    }
                }

                $command_string =  $commandObj->getCommandString();
                foreach($param_value_pairs as $key => $value){
                    $command_string = preg_replace('/%' . $key.'/', $value, $command_string);
                }
                /**
                 * @todo add system call here
                 */

            }
        }
        /**
         * insert CUSTOM CODE you want to run AFTER the commands (if any) that were indicated in PNML file.
         * Remember returning false is not an option here unless you want this trigger to run over and over again.
         *
         */
        /** BEGIN CUSTOM CODE */



        /** END CUSTOM CODE */

        /*
         * Consume/drop tokens
         */
        if(Configuration_WorkFlow::getLogTriggerActivity()) {
            Logger_WorkFlow::info(
                'Trigger passed. Type:auto Name:TR16EmailStaffFinishedWithTeamAgentTriggerAuto UseCase:'.$this->workItemObj->getUseCase()->getName().
                    ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
            );
        }

        /**
        * unconditionally pull trigger and return true
        */
        $this->pullTheTrigger();
        return true;

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR17AddTeamAgentFaxPhoneTriggerUser(){

    
        /**
         * replace this with your CUSTOM CODE. Simply return false if the circumstances that 'pass' this
         * transition are not present OR
         * call $this->pullTheTrigger() and return true if they are present.
         */

        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR17AddTeamAgentFaxPhoneTriggerUser */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){

            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:user Name:TR17AddTeamAgentFaxPhoneTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:user Name:TR17AddTeamAgentFaxPhoneTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }
        /** END CUSTOM CODE */

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR18AddBuildFaxPhoneTriggerUser(){

    
        /**
         * replace this with your CUSTOM CODE. Simply return false if the circumstances that 'pass' this
         * transition are not present OR
         * call $this->pullTheTrigger() and return true if they are present.
         */

        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR18AddBuildFaxPhoneTriggerUser */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){

            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:user Name:TR18AddBuildFaxPhoneTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:user Name:TR18AddBuildFaxPhoneTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }
        /** END CUSTOM CODE */

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR19CreateTeamAgentConfigTriggerUser(){

    
        /**
         * replace this with your CUSTOM CODE. Simply return false if the circumstances that 'pass' this
         * transition are not present OR
         * call $this->pullTheTrigger() and return true if they are present.
         */

        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR19CreateTeamAgentConfigTriggerUser */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){

            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:user Name:TR19CreateTeamAgentConfigTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:user Name:TR19CreateTeamAgentConfigTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }
        /** END CUSTOM CODE */

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR2InviteTeamAgentTriggerUser(){

    
        /**
         * replace this with your CUSTOM CODE. Simply return false if the circumstances that 'pass' this
         * transition are not present OR
         * call $this->pullTheTrigger() and return true if they are present.
         */

        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR2InviteTeamAgentTriggerUser */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){

            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:user Name:TR2InviteTeamAgentTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:user Name:TR2InviteTeamAgentTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }
        /** END CUSTOM CODE */

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR20CreateBuildUserConfigTriggerUser(){

    
        /**
         * replace this with your CUSTOM CODE. Simply return false if the circumstances that 'pass' this
         * transition are not present OR
         * call $this->pullTheTrigger() and return true if they are present.
         */

        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR20CreateBuildUserConfigTriggerUser */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){

            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:user Name:TR20CreateBuildUserConfigTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:user Name:TR20CreateBuildUserConfigTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }
        /** END CUSTOM CODE */

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR21EmailStaffFinishedWithBuildUserTriggerAuto(){

    
        /**
         * insert CUSTOM CODE you want to run BEFORE the commands (if any) that were indicated in PNML file.
         * Remember returning false is not an option here unless you want this trigger to run over and over again.
         *
         */
        /** BEGIN CUSTOM CODE */



        /** END CUSTOM CODE */

        if($this->workItemObj->getTransition()->getCommands()){
            foreach($this->workItemObj->getTransition()->getCommands() as $commandObj){
                $matches = [];
                $param_value_pairs = [];
                if(preg_match_all("/%([A-z1-9_]*)($|\s)/", $commandObj->getCommandString(), $matches)){
                    foreach($matches[1] as $match){
                        if($useCaseTokenObj = $this->getWorkFlowDAO()->FetchUseCaseContextArrWithUseCaseIdAndName($this->workItemObj->getUseCaseId(), $match)){
                            $param_value_pairs[$match] = $useCaseTokenObj->getValue();
                        }
                    }
                }

                $command_string =  $commandObj->getCommandString();
                foreach($param_value_pairs as $key => $value){
                    $command_string = preg_replace('/%' . $key.'/', $value, $command_string);
                }
                /**
                 * @todo add system call here
                 */

            }
        }
        /**
         * insert CUSTOM CODE you want to run AFTER the commands (if any) that were indicated in PNML file.
         * Remember returning false is not an option here unless you want this trigger to run over and over again.
         *
         */
        /** BEGIN CUSTOM CODE */



        /** END CUSTOM CODE */

        /*
         * Consume/drop tokens
         */
        if(Configuration_WorkFlow::getLogTriggerActivity()) {
            Logger_WorkFlow::info(
                'Trigger passed. Type:auto Name:TR21EmailStaffFinishedWithBuildUserTriggerAuto UseCase:'.$this->workItemObj->getUseCase()->getName().
                    ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
            );
        }

        /**
        * unconditionally pull trigger and return true
        */
        $this->pullTheTrigger();
        return true;

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR22BuildUserRegistersLoop1TriggerUser(){

    
        /**
         * replace this with your CUSTOM CODE. Simply return false if the circumstances that 'pass' this
         * transition are not present OR
         * call $this->pullTheTrigger() and return true if they are present.
         */

        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR22BuildUserRegistersLoop1TriggerUser */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){

            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:user Name:TR22BuildUserRegistersLoop1TriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:user Name:TR22BuildUserRegistersLoop1TriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }
        /** END CUSTOM CODE */

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR23AddOrgType2TriggerUser(){

    
        /**
         * replace this with your CUSTOM CODE. Simply return false if the circumstances that 'pass' this
         * transition are not present OR
         * call $this->pullTheTrigger() and return true if they are present.
         */

        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR23AddOrgType2TriggerUser */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){

            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:user Name:TR23AddOrgType2TriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:user Name:TR23AddOrgType2TriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }
        /** END CUSTOM CODE */

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR26BuildUserRegistersLoop2TriggerUser(){

    
        /**
         * replace this with your CUSTOM CODE. Simply return false if the circumstances that 'pass' this
         * transition are not present OR
         * call $this->pullTheTrigger() and return true if they are present.
         */

        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR26BuildUserRegistersLoop2TriggerUser */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){

            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:user Name:TR26BuildUserRegistersLoop2TriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:user Name:TR26BuildUserRegistersLoop2TriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }
        /** END CUSTOM CODE */

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR27AddOrgType3TriggerUser(){

    
        /**
         * replace this with your CUSTOM CODE. Simply return false if the circumstances that 'pass' this
         * transition are not present OR
         * call $this->pullTheTrigger() and return true if they are present.
         */

        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR27AddOrgType3TriggerUser */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){

            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:user Name:TR27AddOrgType3TriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:user Name:TR27AddOrgType3TriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }
        /** END CUSTOM CODE */

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR3InviteBuildUserTriggerUser(){

    
        /**
         * replace this with your CUSTOM CODE. Simply return false if the circumstances that 'pass' this
         * transition are not present OR
         * call $this->pullTheTrigger() and return true if they are present.
         */

        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR3InviteBuildUserTriggerUser */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){

            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:user Name:TR3InviteBuildUserTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:user Name:TR3InviteBuildUserTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }
        /** END CUSTOM CODE */

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR30BuildUserRegistersLoop1TriggerUser(){

    
        /**
         * replace this with your CUSTOM CODE. Simply return false if the circumstances that 'pass' this
         * transition are not present OR
         * call $this->pullTheTrigger() and return true if they are present.
         */

        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR30BuildUserRegistersLoop1TriggerUser */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){

            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:user Name:TR30BuildUserRegistersLoop1TriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:user Name:TR30BuildUserRegistersLoop1TriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }
        /** END CUSTOM CODE */

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR31BuildUserRegistersLoop1TriggerUser(){

    
        /**
         * replace this with your CUSTOM CODE. Simply return false if the circumstances that 'pass' this
         * transition are not present OR
         * call $this->pullTheTrigger() and return true if they are present.
         */

        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR31BuildUserRegistersLoop1TriggerUser */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){

            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:user Name:TR31BuildUserRegistersLoop1TriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:user Name:TR31BuildUserRegistersLoop1TriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }
        /** END CUSTOM CODE */

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR4TeamAgentRegistersTriggerUser(){

    
        /**
         * replace this with your CUSTOM CODE. Simply return false if the circumstances that 'pass' this
         * transition are not present OR
         * call $this->pullTheTrigger() and return true if they are present.
         */

        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR4TeamAgentRegistersTriggerUser */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){

            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:user Name:TR4TeamAgentRegistersTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:user Name:TR4TeamAgentRegistersTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }
        /** END CUSTOM CODE */

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR45EmailStaffStartingAddOrganizationTriggerUser(){

    
        /**
         * replace this with your CUSTOM CODE. Simply return false if the circumstances that 'pass' this
         * transition are not present OR
         * call $this->pullTheTrigger() and return true if they are present.
         */

        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR45EmailStaffStartingAddOrganizationTriggerUser */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){

            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:user Name:TR45EmailStaffStartingAddOrganizationTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:user Name:TR45EmailStaffStartingAddOrganizationTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }
        /** END CUSTOM CODE */

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR49EmailStaffStartAddingUsersTriggerAuto(){

    
        /**
         * insert CUSTOM CODE you want to run BEFORE the commands (if any) that were indicated in PNML file.
         * Remember returning false is not an option here unless you want this trigger to run over and over again.
         *
         */
        /** BEGIN CUSTOM CODE */



        /** END CUSTOM CODE */

        if($this->workItemObj->getTransition()->getCommands()){
            foreach($this->workItemObj->getTransition()->getCommands() as $commandObj){
                $matches = [];
                $param_value_pairs = [];
                if(preg_match_all("/%([A-z1-9_]*)($|\s)/", $commandObj->getCommandString(), $matches)){
                    foreach($matches[1] as $match){
                        if($useCaseTokenObj = $this->getWorkFlowDAO()->FetchUseCaseContextArrWithUseCaseIdAndName($this->workItemObj->getUseCaseId(), $match)){
                            $param_value_pairs[$match] = $useCaseTokenObj->getValue();
                        }
                    }
                }

                $command_string =  $commandObj->getCommandString();
                foreach($param_value_pairs as $key => $value){
                    $command_string = preg_replace('/%' . $key.'/', $value, $command_string);
                }
                /**
                 * @todo add system call here
                 */

            }
        }
        /**
         * insert CUSTOM CODE you want to run AFTER the commands (if any) that were indicated in PNML file.
         * Remember returning false is not an option here unless you want this trigger to run over and over again.
         *
         */
        /** BEGIN CUSTOM CODE */



        /** END CUSTOM CODE */

        /*
         * Consume/drop tokens
         */
        if(Configuration_WorkFlow::getLogTriggerActivity()) {
            Logger_WorkFlow::info(
                'Trigger passed. Type:auto Name:TR49EmailStaffStartAddingUsersTriggerAuto UseCase:'.$this->workItemObj->getUseCase()->getName().
                    ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
            );
        }

        /**
        * unconditionally pull trigger and return true
        */
        $this->pullTheTrigger();
        return true;

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR5BuildUserRegistersTriggerGate(){

    
        $trigger_derived_value = false;
        $work_items_to_trigger = [];

        /**
         * replace this if stmt with your code that calculates the
         * $trigger_derived_value we compare to
         * the gates for this workitem's transition.Returning
         * false is not an option here
         */
        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR5BuildUserRegistersTriggerGate */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){
            $trigger_derived_value = true;
        }

        /** END CUSTOM CODE */

        /**
         * Now that $trigger_derived_value is populated, let's check it
         */

        foreach($this->workItemObj->getTransition()->getGates() as $gateObj)
        {
            if($gateObj->getValueTyped() === $trigger_derived_value)
            {
                $work_items_to_trigger[] = $this->getWorkFlowDAO()->FetchTransitionWithWorkFlowIdAndYasperName(
                    $this->workItemObj->getUseCase()->getWorkFlowId(),
                    $gateObj->getTargetYasperName()
                )->getTransitionId();
            }
        }
        if(! $work_items_to_trigger)
        {
            throw new Exception_WorkFlow('Invalid gate');
        }
        /**
         * Consume/drop tokens
         */
        if(Configuration_WorkFlow::getLogTriggerActivity()) {
            Logger_WorkFlow::info(
                'Trigger passed. Type:gate Name:TR5BuildUserRegistersTriggerGate UseCase:'.$this->workItemObj->getUseCase()->getName().
                    ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__.
                    'trigger_derived_value = '. $trigger_derived_value,
                Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
            );
        }
        /**
        * unconditionally pull trigger and return true
        */
        $this->pullTheTriggerOnGate($work_items_to_trigger);
        return true;

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR56EmailStaffFinishedAddingUsersTriggerAuto(){

    
        /**
         * insert CUSTOM CODE you want to run BEFORE the commands (if any) that were indicated in PNML file.
         * Remember returning false is not an option here unless you want this trigger to run over and over again.
         *
         */
        /** BEGIN CUSTOM CODE */



        /** END CUSTOM CODE */

        if($this->workItemObj->getTransition()->getCommands()){
            foreach($this->workItemObj->getTransition()->getCommands() as $commandObj){
                $matches = [];
                $param_value_pairs = [];
                if(preg_match_all("/%([A-z1-9_]*)($|\s)/", $commandObj->getCommandString(), $matches)){
                    foreach($matches[1] as $match){
                        if($useCaseTokenObj = $this->getWorkFlowDAO()->FetchUseCaseContextArrWithUseCaseIdAndName($this->workItemObj->getUseCaseId(), $match)){
                            $param_value_pairs[$match] = $useCaseTokenObj->getValue();
                        }
                    }
                }

                $command_string =  $commandObj->getCommandString();
                foreach($param_value_pairs as $key => $value){
                    $command_string = preg_replace('/%' . $key.'/', $value, $command_string);
                }
                /**
                 * @todo add system call here
                 */

            }
        }
        /**
         * insert CUSTOM CODE you want to run AFTER the commands (if any) that were indicated in PNML file.
         * Remember returning false is not an option here unless you want this trigger to run over and over again.
         *
         */
        /** BEGIN CUSTOM CODE */



        /** END CUSTOM CODE */

        /*
         * Consume/drop tokens
         */
        if(Configuration_WorkFlow::getLogTriggerActivity()) {
            Logger_WorkFlow::info(
                'Trigger passed. Type:auto Name:TR56EmailStaffFinishedAddingUsersTriggerAuto UseCase:'.$this->workItemObj->getUseCase()->getName().
                    ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
            );
        }

        /**
        * unconditionally pull trigger and return true
        */
        $this->pullTheTrigger();
        return true;

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR6AddTeamAgentWorkPhoneTriggerUser(){

    
        /**
         * replace this with your CUSTOM CODE. Simply return false if the circumstances that 'pass' this
         * transition are not present OR
         * call $this->pullTheTrigger() and return true if they are present.
         */

        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR6AddTeamAgentWorkPhoneTriggerUser */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){

            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:user Name:TR6AddTeamAgentWorkPhoneTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:user Name:TR6AddTeamAgentWorkPhoneTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }
        /** END CUSTOM CODE */

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR65EmailStaffFinishedAddingOrganizationTriggerAuto(){

    
        /**
         * insert CUSTOM CODE you want to run BEFORE the commands (if any) that were indicated in PNML file.
         * Remember returning false is not an option here unless you want this trigger to run over and over again.
         *
         */
        /** BEGIN CUSTOM CODE */



        /** END CUSTOM CODE */

        if($this->workItemObj->getTransition()->getCommands()){
            foreach($this->workItemObj->getTransition()->getCommands() as $commandObj){
                $matches = [];
                $param_value_pairs = [];
                if(preg_match_all("/%([A-z1-9_]*)($|\s)/", $commandObj->getCommandString(), $matches)){
                    foreach($matches[1] as $match){
                        if($useCaseTokenObj = $this->getWorkFlowDAO()->FetchUseCaseContextArrWithUseCaseIdAndName($this->workItemObj->getUseCaseId(), $match)){
                            $param_value_pairs[$match] = $useCaseTokenObj->getValue();
                        }
                    }
                }

                $command_string =  $commandObj->getCommandString();
                foreach($param_value_pairs as $key => $value){
                    $command_string = preg_replace('/%' . $key.'/', $value, $command_string);
                }
                /**
                 * @todo add system call here
                 */

            }
        }
        /**
         * insert CUSTOM CODE you want to run AFTER the commands (if any) that were indicated in PNML file.
         * Remember returning false is not an option here unless you want this trigger to run over and over again.
         *
         */
        /** BEGIN CUSTOM CODE */



        /** END CUSTOM CODE */

        /*
         * Consume/drop tokens
         */
        if(Configuration_WorkFlow::getLogTriggerActivity()) {
            Logger_WorkFlow::info(
                'Trigger passed. Type:auto Name:TR65EmailStaffFinishedAddingOrganizationTriggerAuto UseCase:'.$this->workItemObj->getUseCase()->getName().
                    ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
            );
        }

        /**
        * unconditionally pull trigger and return true
        */
        $this->pullTheTrigger();
        return true;

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR7AddTeamAgentHomePhoneTriggerUser(){

    
        /**
         * replace this with your CUSTOM CODE. Simply return false if the circumstances that 'pass' this
         * transition are not present OR
         * call $this->pullTheTrigger() and return true if they are present.
         */

        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR7AddTeamAgentHomePhoneTriggerUser */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){

            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:user Name:TR7AddTeamAgentHomePhoneTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:user Name:TR7AddTeamAgentHomePhoneTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }
        /** END CUSTOM CODE */

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR8AddTeamAgentCellPhoneTriggerUser(){

    
        /**
         * replace this with your CUSTOM CODE. Simply return false if the circumstances that 'pass' this
         * transition are not present OR
         * call $this->pullTheTrigger() and return true if they are present.
         */

        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR8AddTeamAgentCellPhoneTriggerUser */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){

            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:user Name:TR8AddTeamAgentCellPhoneTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:user Name:TR8AddTeamAgentCellPhoneTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }
        /** END CUSTOM CODE */

    
    }

    /**
     * @return bool
     * @throws Exception_WorkFlow
     */
    public function TR9AddBuildUserWorkPhoneTriggerUser(){

    
        /**
         * replace this with your CUSTOM CODE. Simply return false if the circumstances that 'pass' this
         * transition are not present OR
         * call $this->pullTheTrigger() and return true if they are present.
         */

        /** BEGIN CUSTOM CODE */

        /** lets see if a FREE TriggerFulfillment exists for TR9AddBuildUserWorkPhoneTriggerUser */
        if ($this->getTriggerFulfillmentUtil()->FetchTriggerFulfillmentArrWithUseCaseIdAndTransitionIdAndTriggerFulfillmentStatus(
            $this->workItemObj->getUseCaseId(),
            $this->workItemObj->getTransitionId(),
            Enum\TriggerFulfillmentStatusEnum::FREE
        )){

            /*
             * Consume/drop tokens as warranted
             */
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger passed. Type:user Name:TR9AddBuildUserWorkPhoneTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            $this->pullTheTrigger();
            return true;
        }
        else{
            if(Configuration_WorkFlow::getLogTriggerActivity()) {
                Logger_WorkFlow::info(
                    'Trigger failed. Type:user Name:TR9AddBuildUserWorkPhoneTriggerUser UseCase:'.$this->workItemObj->getUseCase()->getName().
                        ' use_case_id:'.$this->workItemObj->getUseCaseId(). 'at '.__FILE__.':'.__LINE__,
                    Logger_WorkFlow::LOGGER_WORKFLOW_TRIGGER
                );
            }
            return false;
        }
        /** END CUSTOM CODE */

    
    }
}